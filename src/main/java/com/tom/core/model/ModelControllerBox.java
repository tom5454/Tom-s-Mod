// Date: 2015.11.06. 17:51:13
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package com.tom.core.model;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.ResourceLocation;

import com.tom.lib.Configs;
import com.tom.model.IBaseModel;

import com.tom.core.tileentity.TileEntityControllerBox;

public class ModelControllerBox extends ModelBase implements IBaseModel {
	// fields
	ModelRenderer Back;
	ModelRenderer Top;
	ModelRenderer Bottom;
	ModelRenderer Right;
	ModelRenderer Left;
	ModelRenderer Shape1;
	ModelRenderer Shape2;
	ModelRenderer Shape3;
	ModelRenderer Shape4;
	ModelRenderer Shape5;
	ModelRenderer CircuitBoard;
	ModelRenderer R1;
	ModelRenderer IC1;
	ModelRenderer LED1;
	ModelRenderer LED1Off;
	ModelRenderer LED2;
	ModelRenderer LED2Off;
	ModelRenderer Modem;
	ModelRenderer Cable1;
	ModelRenderer Cable2;
	ModelRenderer Cable22;
	ModelRenderer Cable23;
	ModelRenderer ModemOn;

	public ModelControllerBox() {
		textureWidth = 64;
		textureHeight = 64;
		Shape1 = new ModelRenderer(this, 0, 0);
		Shape1.addBox(0F, 0F, 0F, 11, 10, 1);
		Shape1.setRotationPoint(-5.5F, 12F, -2F);
		Shape1.setTextureSize(64, 64);
		Shape1.mirror = true;
		setRotation(Shape1, 0F, 0F, 0F);
		Shape2 = new ModelRenderer(this, 0, 0);
		Shape2.addBox(0F, 0F, 0F, 11, 3, 1);
		Shape2.setRotationPoint(-5.5F, 8F, -2F);
		Shape2.setTextureSize(64, 64);
		Shape2.mirror = true;
		setRotation(Shape2, 0F, 0F, 0F);
		Shape3 = new ModelRenderer(this, 48, 0);
		Shape3.addBox(0F, 0F, 0F, 7, 1, 1);
		Shape3.setRotationPoint(-3.5F, 11F, -2F);
		Shape3.setTextureSize(64, 64);
		Shape3.mirror = true;
		setRotation(Shape3, 0.0174533F, 0F, 0F);
		Shape4 = new ModelRenderer(this, 0, 0);
		Shape4.addBox(0F, 0F, 0F, 2, 1, 1);
		Shape4.setRotationPoint(3.5F, 11F, -2F);
		Shape4.setTextureSize(64, 64);
		Shape4.mirror = true;
		setRotation(Shape4, 0F, 0F, 0F);
		Shape5 = new ModelRenderer(this, 0, 0);
		Shape5.addBox(0F, 0F, 0F, 2, 1, 1);
		Shape5.setRotationPoint(-5.5F, 11F, -2F);
		Shape5.setTextureSize(64, 64);
		Shape5.mirror = true;
		setRotation(Shape5, 0F, 0F, 0F);// door

		Back = new ModelRenderer(this, 0, 0);
		Back.addBox(0F, 0F, 0F, 11, 14, 1);
		Back.setRotationPoint(-5.5F, 8F, -8F);
		Back.setTextureSize(64, 64);
		Back.mirror = true;
		setRotation(Back, 0F, 0F, 0F);
		Top = new ModelRenderer(this, 0, 0);
		Top.addBox(0F, 0F, 0F, 11, 1, 5);
		Top.setRotationPoint(-5.5F, 8F, -7F);
		Top.setTextureSize(64, 64);
		Top.mirror = true;
		setRotation(Top, 0F, 0F, 0F);
		Bottom = new ModelRenderer(this, 0, 0);
		Bottom.addBox(0F, 0F, 0F, 11, 1, 5);
		Bottom.setRotationPoint(-5.5F, 21F, -7F);
		Bottom.setTextureSize(64, 64);
		Bottom.mirror = true;
		setRotation(Bottom, 0F, 0F, 0F);
		Right = new ModelRenderer(this, 0, 0);
		Right.addBox(0F, 0F, 0F, 1, 12, 5);
		Right.setRotationPoint(4.5F, 9F, -7F);
		Right.setTextureSize(64, 64);
		Right.mirror = true;
		setRotation(Right, 0F, 0F, 0F);
		Left = new ModelRenderer(this, 0, 0);
		Left.addBox(0F, 0F, 0F, 1, 12, 5);
		Left.setRotationPoint(-5.5F, 9F, -7F);
		Left.setTextureSize(64, 64);
		Left.mirror = true;
		setRotation(Left, 0F, 0F, 0F);
		CircuitBoard = new ModelRenderer(this, 48, 2);
		CircuitBoard.addBox(0F, 0F, 0F, 7, 8, 1);
		CircuitBoard.setRotationPoint(-3.5F, 10F, -7F);
		CircuitBoard.setTextureSize(64, 64);
		CircuitBoard.mirror = true;
		setRotation(CircuitBoard, 0F, 0F, 0F);
		R1 = new ModelRenderer(this, 60, 11);
		R1.addBox(0F, 0F, 0F, 1, 2, 1);
		R1.setRotationPoint(2F, 11F, -6F);
		R1.setTextureSize(64, 64);
		R1.mirror = true;
		setRotation(R1, 0F, 0F, 0F);
		IC1 = new ModelRenderer(this, 58, 14);
		IC1.addBox(0F, 0F, 0F, 2, 3, 1);
		IC1.setRotationPoint(-3F, 12F, -6F);
		IC1.setTextureSize(64, 64);
		IC1.mirror = true;
		setRotation(IC1, 0F, 0F, 0F);
		LED1 = new ModelRenderer(this, 44, 0);
		LED1.addBox(0F, 0F, 0F, 1, 1, 1);
		LED1.setRotationPoint(0F, 11F, -6F);
		LED1.setTextureSize(64, 64);
		LED1.mirror = true;
		setRotation(LED1, 0F, 0F, 0F);
		LED1Off = new ModelRenderer(this, 44, 2);
		LED1Off.addBox(0F, 0F, 0F, 1, 1, 1);
		LED1Off.setRotationPoint(0F, 11F, -6F);
		LED1Off.setTextureSize(64, 64);
		LED1Off.mirror = true;
		setRotation(LED1Off, 0F, 0F, 0F);
		LED2 = new ModelRenderer(this, 44, 4);
		LED2.addBox(0F, 0F, 0F, 1, 1, 1);
		LED2.setRotationPoint(1F, 14F, -6F);
		LED2.setTextureSize(64, 64);
		LED2.mirror = true;
		setRotation(LED2, 0F, 0F, 0F);
		LED2Off = new ModelRenderer(this, 44, 6);
		LED2Off.addBox(0F, 0F, 0F, 1, 1, 1);
		LED2Off.setRotationPoint(1F, 14F, -6F);
		LED2Off.setTextureSize(64, 64);
		LED2Off.mirror = true;
		setRotation(LED2Off, 0F, 0F, 0F);
		Modem = new ModelRenderer(this, 44, 18);
		Modem.addBox(0F, 0F, 0F, 7, 2, 3);
		Modem.setRotationPoint(-3.5F, 19F, -5.5F);
		Modem.setTextureSize(64, 64);
		Modem.mirror = true;
		setRotation(Modem, 0F, 0F, 0F);
		Cable1 = new ModelRenderer(this, 54, 11);
		Cable1.addBox(0F, 0F, 0F, 1, 3, 1);
		Cable1.setRotationPoint(2F, 17F, -6.5F);
		Cable1.setTextureSize(64, 64);
		Cable1.mirror = true;
		setRotation(Cable1, 0F, 0F, 0F);
		Cable2 = new ModelRenderer(this, 54, 15);
		Cable2.addBox(0F, 0F, 0F, 1, 2, 1);
		Cable2.setRotationPoint(-1F, 18F, -6.5F);
		Cable2.setTextureSize(64, 64);
		Cable2.mirror = true;
		setRotation(Cable2, 0F, 0F, 0F);
		Cable22 = new ModelRenderer(this, 60, 24);
		Cable22.addBox(0F, 0F, 0F, 1, 3, 1);
		Cable22.setRotationPoint(-1F, 16F, -5.5F);
		Cable22.setTextureSize(64, 64);
		Cable22.mirror = true;
		setRotation(Cable22, 0F, 0F, 0F);
		Cable23 = new ModelRenderer(this, 56, 24);
		Cable23.addBox(0F, 0F, 0F, 1, 1, 1);
		Cable23.setRotationPoint(-1F, 16F, -6.5F);
		Cable23.setTextureSize(64, 64);
		Cable23.mirror = true;
		setRotation(Cable23, 0F, 0F, 0F);
		ModemOn = new ModelRenderer(this, 44, 28);
		ModemOn.addBox(0F, 0F, 0F, 7, 2, 3);
		ModemOn.setRotationPoint(-3.5F, 19F, -5.5F);
		ModemOn.setTextureSize(64, 64);
		ModemOn.mirror = true;
		setRotation(ModemOn, 0F, 0F, 0F);

	}

	@Override
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		Back.render(f5);
		Top.render(f5);
		Bottom.render(f5);
		Right.render(f5);
		Left.render(f5);
		Shape1.render(f5);
		Shape2.render(f5);
		Shape3.render(f5);
		Shape4.render(f5);
		Shape5.render(f5);
		CircuitBoard.render(f5);
		R1.render(f5);
		IC1.render(f5);
		LED1.render(f5);
		LED1Off.render(f5);
		LED2.render(f5);
		LED2Off.render(f5);
		Modem.render(f5);
		Cable1.render(f5);
		Cable2.render(f5);
		Cable22.render(f5);
		Cable23.render(f5);
		ModemOn.render(f5);
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity ent) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, ent);
	}

	@Override
	public void renderStatic(float f5, TileEntity tile) {
		if (tile != null && tile instanceof TileEntityControllerBox) {
			TileEntityControllerBox te = (TileEntityControllerBox) tile;
			GL11.glPushMatrix();// base
			Back.render(f5);
			Top.render(f5);
			Bottom.render(f5);
			Right.render(f5);
			Left.render(f5);
			CircuitBoard.render(f5);
			R1.render(f5);
			IC1.render(f5);
			if (te.hasModem) {
				Cable1.render(f5);
				Cable2.render(f5);
				Cable22.render(f5);
				Cable23.render(f5);
				LED1.render(f5);
				if (te.connected) {
					ModemOn.render(f5);
					LED2.render(f5);
				} else {
					Modem.render(f5);
					LED2Off.render(f5);
				}
			} else {
				LED1Off.render(f5);
				LED2Off.render(f5);
			}
			GL11.glPopMatrix();// base
			GL11.glPushMatrix();// door
			if (te.doorOpened) {
				GL11.glTranslated(0.0, 0.0, -0.1D);
				GL11.glRotatef(-90F, 0.0F, 1.0F, 0.0F);
				GL11.glTranslated(90F / 3F / 100F, 0.0, 0.405F);
			}
			// 0.41F 90 0 0
			Shape1.render(f5);
			Shape2.render(f5);
			Shape3.render(f5);
			Shape4.render(f5);
			Shape5.render(f5);
			GL11.glPopMatrix();// door
		} else {
			Back.render(f5);
			Top.render(f5);
			Bottom.render(f5);
			Right.render(f5);
			Left.render(f5);
			Shape1.render(f5);
			Shape2.render(f5);
			Shape3.render(f5);
			Shape4.render(f5);
			Shape5.render(f5);
			CircuitBoard.render(f5);
			R1.render(f5);
			IC1.render(f5);
			LED1.render(f5);
			LED2.render(f5);
			Modem.render(f5);
			Cable1.render(f5);
			Cable2.render(f5);
			Cable22.render(f5);
			Cable23.render(f5);
		}
	}

	@Override
	public void renderDynamic(float size, TileEntity te, float partialTicks) {
		// Shape1.render(size);
	}

	@Override
	public ResourceLocation getModelTexture(TileEntity tile) {
		return Configs.contBoxOff;
	}

	@Override
	public boolean rotateModelBasedOnBlockMeta() {
		return true;
	}

}
